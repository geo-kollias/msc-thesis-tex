@misc{cliffc:TheProblem,
      author = "Cliff Click",
      title = "Fixing {T}he {I}nlining {"Problem"}",
      month = "April",
      year = "2011",
      howpublished = "\url{http://www.azulsystems.com/blog/cliff/2011-04-04-fixing-the-inlining-problem}"
}

@misc{infoq:Yammer,
      author = "Alex Blewitt",
      title = "Yammer {M}oving from {S}cala to {J}ava",
      month = "November",
      year = "2011",
      howpublished = "\url{http://www.infoq.com/news/2011/11/yammer-scala}"
}

@misc{paulp:declosurify,
      author = "Phillips, Paul",
      title = "Declosurify",
      howpublished = "\url{https://github.com/paulp/declosurify}"
}

@book{odersky:PiS,
 author = {Odersky, Martin and Spoon, Lex and Venners, Bill},
 title = {Programming in Scala},
 year = {2010},
 isbn = {0981531644},
 edition = {2nd},
 publisher = {Artima Press},
} 

@misc{scaladocs:refl,
      author = "Heather Miller and Eugene Burmako and Philipp Haller",
      title = "Reflection",
      howpublished = "\url{http://docs.scala-lang.org/overviews/reflection/overview.html}"
}

@article{sheard_template_2002,
        title = {{Template meta-programming for Haskell}},
        volume = {37},
        issn = {0362-1340},
        url = {http://doi.acm.org/10.1145/636517.636528},
        doi = {10.1145/636517.636528},
        abstract = {We propose a new extension to the purely functional programming language Haskell that supports compile-time meta-programming. The purpose of the system is to support the algorithmic construction of programs at compile-{time.The} ability to generate code at compile time allows the programmer to implement such features as polytypic programs, macro-like expansion, user directed optimization (such as inlining), and the generation of supporting data structures and functions from existing data structures and {functions.Our} design is being implemented in the Glasgow Haskell Compiler, ghc.},
        number = {12},
        urldate = {2013-05-26},
        journal = {{SIGPLAN} Not.},
        author = {Sheard, Tim and Jones, Simon Peyton},
        month = dec,
        year = {2002},
        keywords = {Meta programming, templates},
        pages = {60-75}
}


@mastersthesis{nemerle:macros,
  title={{Syntax-extending and type-reflecting macros in an object-oriented language}},
  author={Skalski, Kamil},
  year={2005},
  school={University of Wroc{\l}aw}
}

@inproceedings{burmako2012scala,
  title={{Scala Macros, a Technical Report}},
  author={Burmako, Eugene and Odersky, Martin},
  booktitle={Third International Valentin Turchin Workshop on Metacomputation},
  pages={23},
  year={2012}
}

@inproceedings{kohlbecker1986hygienic,
  title={Hygienic macro expansion},
  author={Kohlbecker, Eugene and Friedman, Daniel P and Felleisen, Matthias and Duba, Bruce},
  booktitle={Proceedings of the 1986 ACM conference on LISP and functional programming},
  pages={151--161},
  year={1986},
  organization={ACM}
}

@article{oliveira_type_2010,
        title = {Type classes as objects and implicits},
        volume = {45},
        issn = {0362-1340},
        url = {http://doi.acm.org/10.1145/1932682.1869489},
        doi = {10.1145/1932682.1869489},
        abstract = {Type classes were originally developed in Haskell as a disciplined alternative to ad-hoc polymorphism. Type classes have been shown to provide a type-safe solution to important challenges in software engineering and programming languages such as, for example, retroactive extension of programs. They are also recognized as a good mechanism for concept-based generic programming and, more recently, have evolved into a mechanism for type-level computation. This paper presents a lightweight approach to type classes in object-oriented ({OO)} languages with generics using the {CONCEPT} pattern and implicits (a type-directed implicit parameter passing mechanism). This paper also shows how Scala's type system conspires with implicits to enable, and even surpass, many common extensions of the Haskell type class system, making Scala ideally suited for generic programming in the large.},
        number = {10},
        urldate = {2013-05-26},
        journal = {{SIGPLAN} Not.},
        author = {Oliveira, Bruno {C.d.S.} and Moors, Adriaan and Odersky, Martin},
        month = oct,
        year = {2010},
        keywords = {abstract datatypes, c++ concepts, scala, type classes},
        pages = {341-360}
}

@phdthesis{moors2009type,
  title={{Type Constructor Polymorphism for Scala: Theory and Practice}},
  author={Moors, Adriaan},
  year={2009},
  school={PhD thesis, Katholieke Universiteit Leuven}
}

@misc{axel22:scalameter,
      author = "Aleksandar Prokopec",
      title = "ScalaMeter",
      howpublished = "\url{http://axel22.github.io/scalameter/}"
}

@phdthesis{dragos2010compiling,
  title={{Compiling Scala for performance}},
  author={Dragos, Iulian},
  year={2010},
  school={{\'E}COLE POLYTECHNIQUE F{\'E}D{\'E}RALE DE LAUSANNE}
}

@article{liskov1994behavioral,
  title={A behavioral notion of subtyping},
  author={Liskov, Barbara H and Wing, Jeannette M},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={16},
  number={6},
  pages={1811--1841},
  year={1994},
  publisher={ACM}
}